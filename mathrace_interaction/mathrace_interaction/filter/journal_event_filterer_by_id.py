# Copyright (C) 2024 by the Turing @ DMF authors
#
# This file is part of Turing @ DMF.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
"""Filter events in a journal by their ID."""

import argparse
import typing

from mathrace_interaction.abc.abstract_journal_reader import AbstractJournalReader
from mathrace_interaction.filter.journal_event_filterer import journal_event_filterer
from mathrace_interaction.filter.strip_comments_and_unhandled_events_from_journal import _is_handled_event


def journal_event_filterer_by_id(journal_stream: typing.TextIO, id_upper_bound: int) -> str:
    """
    Filter events in a journal by their ID.

    Parameters
    ----------
    journal_stream
        The I/O stream that reads the journal generated by mathrace or simdis.
        The I/O stream is typically generated by open().
    id_upper_bound
        Upper bound of the event ID: all events with an ID larger than this one will be discarded.

    Returns
    -------
    :
        A journal which only contains events with ID smaller than or equal to the provided ID.
    """
    return journal_event_filterer(journal_stream, _generate_filter_by_id(id_upper_bound))


def _generate_filter_by_id(
    id_upper_bound: int
) -> typing.Callable[[str, str, type[AbstractJournalReader]], bool]:
    """Determine if an event occurred has an ID smaller than the provided upper bound."""
    current_id = 0
    over_id_upper_bound = False

    def _(timestamp: str, event_type: str, journal_reader_class: type[AbstractJournalReader]) -> bool:
        """Determine if an event occurred has an ID smaller than the provided upper bound (internal implementation)."""
        nonlocal current_id
        nonlocal over_id_upper_bound
        if over_id_upper_bound:
            return False
        else:
            blacklist = [journal_reader_class.RACE_START, journal_reader_class.RACE_END]
            if _is_handled_event(timestamp, event_type, journal_reader_class) and event_type not in blacklist:
                current_id += 1
            if current_id == id_upper_bound:
                over_id_upper_bound = True
            return True

    return _


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-file", type=str, required=True, help="Path of the input journal file")
    parser.add_argument("-p", "--id-upper-bound", type=int, required=True, help="Upper bound of the event ID")
    parser.add_argument("-o", "--output-file", type=str, required=True, help="Path of the output journal file")
    args = parser.parse_args()
    with open(args.input_file) as input_journal_stream:
        output_journal = journal_event_filterer_by_id(input_journal_stream, args.id_upper_bound)
    with open(args.output_file, "w") as output_journal_stream:
        output_journal_stream.write(output_journal)
