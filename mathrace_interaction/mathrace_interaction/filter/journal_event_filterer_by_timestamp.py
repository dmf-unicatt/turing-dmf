# Copyright (C) 2024-2025 by the Turing @ DMF authors
#
# This file is part of Turing @ DMF.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
"""Filter events in a journal by their timestamp."""

import argparse
import typing

from mathrace_interaction.abc.abstract_journal_reader import AbstractJournalReader
from mathrace_interaction.filter.journal_event_filterer import journal_event_filterer
from mathrace_interaction.time.convert_timestamp_to_number_of_seconds import convert_timestamp_to_number_of_seconds


def journal_event_filterer_by_timestamp(journal_stream: typing.TextIO, timestamp_upper_bound: str) -> str:
    """
    Filter events in a journal by their timestamp.

    Parameters
    ----------
    journal_stream
        The I/O stream that reads the journal generated by mathrace or simdis.
        The I/O stream is typically generated by open().
    timestamp_upper_bound
        Upper bound of the event timestamp: all events that happened after this timestamp will be discarded.

    Returns
    -------
    :
        A journal which only contains events that happened before, or at, the provided timestamp.
    """
    return journal_event_filterer(
        journal_stream, _generate_filter_by_timestamp(_convert_timestamp_str_to_int(timestamp_upper_bound)))


def _convert_timestamp_str_to_int(timestamp: str) -> int:
    """Convert a timestamp string to an integer."""
    if ":" in timestamp:
        return convert_timestamp_to_number_of_seconds(timestamp)
    elif "." in timestamp:
        timestamp, _ = timestamp.split(".")
        return int(timestamp)
    else:
        return int(timestamp)


def _generate_filter_by_timestamp(
    timestamp_upper_bound: int
) -> typing.Callable[[str, str, type[AbstractJournalReader]], bool]:
    """Determine if an event occurred before the provided timestamp upper bound."""

    def _(timestamp: str, event_type: str, journal_reader_class: type[AbstractJournalReader]) -> bool:
        """Determine if an event occurred before the provided timestamp upper bound (internal implementation)."""
        timestamp_int = _convert_timestamp_str_to_int(timestamp)
        return timestamp_int <= timestamp_upper_bound

    return _


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input-file", type=str, required=True, help="Path of the input journal file")
    parser.add_argument(
        "-t", "--timestamp-upper-bound", type=str, required=True, help="Upper bound of the event timestamp")
    parser.add_argument("-o", "--output-file", type=str, required=True, help="Path of the output journal file")
    args = parser.parse_args()
    with open(args.input_file) as input_journal_stream:
        output_journal = journal_event_filterer_by_timestamp(input_journal_stream, args.timestamp_upper_bound)
    with open(args.output_file, "w") as output_journal_stream:
        output_journal_stream.write(output_journal)
