# Copyright (C) 2024 by the Turing @ DMF authors
#
# This file is part of Turing @ DMF.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
"""Filter events in a mathrace journal."""

import sys
import typing

from mathrace_interaction.abc.abstract_journal_reader import AbstractJournalReader
from mathrace_interaction.determine_journal_version import determine_journal_version


def journal_event_filterer(
    journal_stream: typing.TextIO,
    event_filter_function: typing.Callable[[str, str, type[AbstractJournalReader]], bool]
) -> str:
    """
    Filter events in a mathrace journal.

    Parameters
    ----------
    journal_stream
        The I/O stream that reads the journal generated by mathrace or simdis.
        The I/O stream is typically generated by open().
    event_filter_function
        A function that given the timestamp and the event code, returns True if the line must be kept,
        and False if the line must be discarded

    Returns
    -------
    :
        A string representing the filtered journal. In addition to the operations carried out by the filter,
        comments are discarded too.
    """
    # Determine the version of the mathrace journal
    version = determine_journal_version(journal_stream)
    # Determine the journal reader class corresponding to the detected version
    journal_reader_class = getattr(
        sys.modules["mathrace_interaction.journal_reader"], f"JournalReader{version.capitalize()}")
    # Process the stream, stripping any unnecessary line
    output_lines: list[str] = []
    for line in journal_stream.readlines():
        line = line.strip("\n")
        if line.startswith("#"):
            # Discard commented lines
            pass
        elif line.startswith("---"):
            # This line contains a race setup code, rather than a race event, so it must be kept
            output_lines.append(line)
        else:
            # This line contains a race event
            timestamp, event_type, _ = line.split(" ", maxsplit=2)
            if event_filter_function(timestamp, event_type, journal_reader_class):
                output_lines.append(line)
    # The stream was fully consumed by this function: reset it back to the beginning in case
    # the caller wants to use the same stream elsewhere.
    journal_stream.seek(0)
    # Combine into a single string and return
    return "\n".join(output_lines)
