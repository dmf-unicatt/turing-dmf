# Copyright (C) 2024 by the Turing @ DMF authors
#
# This file is part of Turing @ DMF.
#
# SPDX-License-Identifier: AGPL-3.0-or-later
"""Test utilities in mathrace_interaction.utils.ssh_client."""

import pathlib
import tempfile
import typing

import mockssh
import paramiko
import pytest

from mathrace_interaction.utils.ssh_client import get_ssh_client, open_file_on_ssh_host


def test_ssh_client_users(ssh_server: mockssh.Server) -> None:
    """Test the mockssh.Server fixture by listing the available users."""
    assert list(ssh_server.users) == ["user"]



@pytest.mark.parametrize("get_client", [
    lambda ssh_server: ssh_server.client("user"),
    lambda ssh_server: get_ssh_client(
        ssh_server.host, "user", port=ssh_server.port, key_filename=ssh_server._users["user"][0])
])
def test_ssh_client_create_file(
    ssh_server: mockssh.Server, get_client: typing.Callable[[mockssh.Server], paramiko.SSHClient]
) -> None:
    """Test the get_ssh_client and open_file_on_ssh_host functions."""
    with tempfile.NamedTemporaryFile() as input_file, tempfile.NamedTemporaryFile() as output_file:
        text = "This is a text file generated by test_ssh_server_create_file"
        pathlib.Path(input_file.name).write_text(text)
        assert pathlib.Path(output_file.name).read_text() == ""
        # Copy the local input file to a remote output file via SFTP
        client = get_client(ssh_server)
        sftp = client.open_sftp()
        sftp.put(input_file.name, output_file.name, confirm=True)
        # Open the output file on the SSH server via SFTP and verify its content
        with open_file_on_ssh_host(pathlib.Path(output_file.name), client) as stream:
            assert stream.read() == text
        # The SSH server is actually a mock one, which stores both input and output files on the same filesystem
        with open_file_on_ssh_host(pathlib.Path(output_file.name), None) as stream:
            assert stream.read() == text
        assert pathlib.Path(output_file.name).read_text() == text
