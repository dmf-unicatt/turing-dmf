diff --git a/engine/static/engine/js/client.js b/engine/static/engine/js/client.js
index b9d778d..c0e5eba 100644
--- a/engine/static/engine/js/client.js
+++ b/engine/static/engine/js/client.js
@@ -7,16 +7,16 @@ function increaseSlider(slider, step) {
     slider[0].stepUp();
 }
 
+
 class Gara {
-    constructor(data) {
+    constructor(data, client) {
         // Costruisce la gara a partire dai dati forniti dal server
-        console.log("start building Gara");
-
         this.inizio = new Date(data.inizio);
         if (data.inizio == null) {
             this.inizio = null;
             this._time = null;
         }
+        this.client = client;
 
         this.n_prob = data.n_prob;
         this.fixed_bonus = data.fixed_bonus;
@@ -148,16 +148,17 @@ class Gara {
     }
 
     get progess() {
-        return (this.time - this.inizio)/(this.fine-this.inizio)
+        if (this.inizio == null) return;
+        return (this.time - this.inizio)/(this.fine-this.inizio);
     }
 
     set progress(value) {
         if (this.inizio == null) return;
         // Si sposta al progress specificato, calcolando gli eventi in mezzo
         if (value==null)
-            this.time = Date.now();
-        else
-            this.time = new Date(this.inizio.getTime()+Math.floor((this.fine-this.inizio)*value));
+            value = this.client.timer.now();
+        this.time = new Date(value);
+        console.log("progress at time", this.time);
     }
 
     get soglia_blocco() {
@@ -199,7 +200,6 @@ class Gara {
     }
 
     get classifica() {
-        console.log("classifica");
         var ret = [];
         for (var i in this.squadre) {
             ret.push({
@@ -475,20 +475,21 @@ class Bonus {
 }
 
 class ClassificaClient {
-    constructor(url, view, following=[]) {
+    constructor(url, view, timer, following=[]) {
         this.url = url;
         this.view = view;
+        this.timer = timer;
         this.following = following;
         this.autoplay = 0;
         this.recalculating = false;
     }
 
     init() {
-        console.log("client init");
         var self = this;
         $.getJSON(this.url).done(function(data){
             self.recalculating = true;
-            self.gara = new Gara(data);
+            self.gara = new Gara(data, self);
+            self.timer.init(self.gara.inizio.getTime());
             self.following = data.consegnatore_per
             self.progress = null;
             self.recalculating = false;
@@ -661,6 +662,7 @@ class ClassificaClient {
           else $("#riga-"+riga).removeClass("text-muted");
           $("#pos-"+riga).html(sq.posizione(classifica)+"° ");
           $("#nome-"+riga).html(sq.nome);
+          $("#num-"+riga).html(sq.id);
           $("#punt-"+riga).html(""+sq.punteggio);
           for (var j in sq.risposte) {
               var r = sq.risposte[j];
@@ -692,11 +694,10 @@ class ClassificaClient {
 
     toggleReplay(button, slider_id) {
         this.autoplay = 1 - this.autoplay;
-        console.log(this.autoplay ? 'Autoplay started' : 'Autoplay stopped');
         if (this.autoplay) {
             button.innerHTML = '<i class="fas fa-pause"></i>';
             var slider = $("#"+slider_id);
-            if (slider[0].value == 1000) slider[0].value = 0;
+            if (slider[0].value == slider[0].max) slider[0].value = 0;
             increaseSlider(slider, 1);
             this.autoplayInterval = setInterval(increaseSlider, 100, slider, 1);
         }
diff --git a/engine/templates/classifiche/class_template.html b/engine/templates/classifiche/class_template.html
index 8f70f2f..62417b0 100644
--- a/engine/templates/classifiche/class_template.html
+++ b/engine/templates/classifiche/class_template.html
@@ -13,37 +13,141 @@
 
 <script>
 document.updated = false;
+document.client = null;
 document.addEventListener("updated", function(e) {
   document.updated = true;
 });
+
+// Funzioni ausiliare per la conversione dei tempi
+function integer_to_elapsed_time(seconds) {
+    return new Date(seconds * 1000).toISOString().slice(11, 19);
+}
+
+function elapsed_time_to_integer(elapsed) {
+    return elapsed.split(':').reduce((acc,time) => (60 * acc) + +time);
+}
+
+// Classe per leggere l'ora corrente dal server, anziché dal client
+class ServerDate {
+    static now() {
+        const request = new XMLHttpRequest();
+        request.open("GET", "/engine/now", false); // `false` makes the request synchronous
+        request.send(null);
+
+        if (request.status === 200) {
+            var time_server = Date.parse(request.responseText.trim());
+            var time_client = Date.now();
+            console.log('Client time', time_client, '- server time', time_server, '- offset', time_client - time_server, 'milliseconds');
+            return time_server;
+        }
+        return null;
+    }
+}
+
+// Classe ausiliaria per traslare il tempo corrente in un tempo di gara
+class ServerDateWithOffset {
+    /*
+    Nei disegni seguenti:
+     - ===== rappresenta istanti di tempo durante la gara
+     - ----- rappresenta istanti di tempo prima o dopo la gara
+     - ..... rappresenta istanti di tempo in cui la pagina web
+             classifica è aperta
+     - I è la data di inizio della gara, F la data di fine;
+
+
+    Durante la gara, apriamo la pagina del browser all'istante A (apertura)
+    tipicamente poco dopo l'istante I.
+    Con I e A fissati, il browser aggiorna periodicamente il valore del tempo
+    corrente sul server, che chiameremo S.
+    Graficamente la situazione è rappresentata da:
+
+     ------|==|===========|===============|-------------------------------------->
+           I  A...........S               F
+
+     Il tempo corrente di gara G è chiaramente S.
+
+     Dopo la gara, immaginiamoci di voler rivedere lo svolgersi dal vivo della gara
+     come se fossimo all'istante R (per replay). La lettera S indica ancora il valore
+     corrente dell'orologio sul server, che ovviamente sarà maggiore di F, e quindi
+     da traslare ai fini del calcolo del punteggio. Graficamente
+
+     ------|=====|========================|----------------|-----------|--------->
+           I     R                        F                A...........S
+                 ^<<<<< A deve essere trasformato in R <<<<V
+
+     Il tempo corrente di gara è quindi I + (R - I) + (S - A).
+
+     Nel caso di questo script, l'utente passa come argomento race_time
+     il valore dR := R - I. La formula finale è quindi I + (dR + (S - A)).
+     */
+    constructor(race_time, time_load_page) {
+        this.race_time = race_time;
+        this.time_load_page = time_load_page;
+        this.inizio = null;
+    }
+
+    init(inizio) {
+        this.inizio = inizio;
+    }
+
+    now() {
+        return this.inizio + (this.race_time + (ServerDate.now() - this.time_load_page));
+    }
+}
+
+// Analogo della classe precedente nel caso di gara in corso.
+class ServerDateWithoutOffset {
+    init(inizio_unused) {
+        // La firma prevede di passare il parametro inizio per simmetria con il caso con offset,
+        // ma non lo utilizza davvero.
+    }
+
+    now() {
+        return ServerDate.now();
+    }
+}
+
 $(document).ready(function() {
+    var time_load_page = ServerDate.now();
+
+    {% if race_time is None %}
+    var timer = new ServerDateWithoutOffset();
+    {% else %}
+    var timer = new ServerDateWithOffset({{ race_time }} * 1000, time_load_page);
+    {% endif %}
+
     var url = "{% url 'engine:status' object.pk %}";
-    var client = new ClassificaClient(url, '{% block class_type %}{% endblock %}');
+    var client = new ClassificaClient(url, '{% block class_type %}{% endblock %}', timer);
     client.init();
-    {% if object.finished %}
-    function integer_to_elapsed_time(seconds) {
-        return new Date(seconds * 1000).toISOString().slice(11, 19);
-    }
-    function elapsed_time_to_integer(elapsed) {
-        return elapsed.split(':').reduce((acc,time) => (60 * acc) + +time);
-    }
+    document.client = client;
+
+    {% if ended %}
+    var maxElapsedTime =  Math.min(
+        Math.floor(time_load_page / 1000 - {{ object.inizio | date:"U" }}),
+        elapsed_time_to_integer("{{object.durata}}"));
+    $("#myRange").attr("max", maxElapsedTime);
+        {% if race_time is None %}
+    $("#myRange").val(maxElapsedTime);
+    $("#elapsedTimeText").val(integer_to_elapsed_time(maxElapsedTime));
+        {% else %}
+    $("#myRange").val({{ race_time }});
+    $("#elapsedTimeText").val(integer_to_elapsed_time({{ race_time }}));
+        {% endif %}
     $("#myRange").on('input', function() {
-        client.progress = this.value/1000;
-        var durata = elapsed_time_to_integer("{{object.durata}}");
-        elapsedTimeText.value = integer_to_elapsed_time(Math.floor(this.value / 1000 * durata));
+        var elapsedTime = this.value;
+        elapsedTimeText.value = integer_to_elapsed_time(elapsedTime);
+        client.progress = client.gara.inizio.getTime() + elapsedTime * 1000;
     });
     $("#elapsedTimeText").on('blur', function() {
-        var durata = elapsed_time_to_integer("{{object.durata}}");
-        var elapsed_time = elapsed_time_to_integer(this.value);
-        client.progress = elapsed_time/durata;
-        myRange.value = Math.floor(elapsed_time/durata * 1000);
+        var elapsedTime = elapsed_time_to_integer(this.value);
+        myRange.value = elapsedTime;
+        client.progress = client.gara.inizio.getTime() + elapsedTime * 1000;
     });
     $("#play").click(function() {
         client.toggleReplay(this, "myRange")
     });
-
     {% else %}
-    setInterval(function() {client.update()}, 3000);
+    setInterval(function() {client.update()}, {{ computation_rate }} * 1000);
     {% endif %}
 });
 
diff --git a/engine/templates/classifiche/punti_problemi.html b/engine/templates/classifiche/punti_problemi.html
index 6142e4c..f913a7b 100644
--- a/engine/templates/classifiche/punti_problemi.html
+++ b/engine/templates/classifiche/punti_problemi.html
@@ -28,13 +28,6 @@
     {% endfor %}
     </table>
 
-    {% if object.finished %}
-    <div class="row pt-3  no-gutters">
-        <input type="range" min="0" max="1000" value="1000"  id="myRange">
-        <button id="play" class="ml-2"><i class="fas fa-play"></i></button>
-        <input value="{{object.durata}}" id="elapsedTimeText">
-    </div>
-    {% endif %}
-
+    {% include 'classifiche/replay_control.html' %}
 </div>
 {% endblock %}
diff --git a/engine/templates/classifiche/replay_control.html b/engine/templates/classifiche/replay_control.html
new file mode 100644
index 0000000..3611b5c
--- /dev/null
+++ b/engine/templates/classifiche/replay_control.html
@@ -0,0 +1,7 @@
+    {% if ended %}
+    <div class="row pt-3 no-gutters" id="replayControl">
+        <input type="range" min="0" max="0" value="0" id="myRange">
+        <button id="play" class="ml-2"><i class="fas fa-play"></i></button>
+        <input value="00:00:00" id="elapsedTimeText">
+    </div>
+    {% endif %}
diff --git a/engine/templates/classifiche/squadre.html b/engine/templates/classifiche/squadre.html
index 407c5f5..fbbbb7e 100644
--- a/engine/templates/classifiche/squadre.html
+++ b/engine/templates/classifiche/squadre.html
@@ -33,14 +33,6 @@
         </table>
     </div>
 
-
-    {% if object.finished %}
-    <div class="row pt-3 no-gutters">
-        <input type="range" min="0" max="1000" value="1000"  id="myRange">
-        <button id="play" class="ml-2"><i class="fas fa-play"></i></button>
-        <input value="{{object.durata}}" id="elapsedTimeText">
-    </div>
-    {% endif %}
-
+    {% include 'classifiche/replay_control.html' %}
 </div>
 {% endblock %}
diff --git a/engine/templates/classifiche/stato_problemi.html b/engine/templates/classifiche/stato_problemi.html
index 113a1bb..df301de 100644
--- a/engine/templates/classifiche/stato_problemi.html
+++ b/engine/templates/classifiche/stato_problemi.html
@@ -32,13 +32,6 @@
     </table>
     </div>
 
-    {% if object.finished %}
-    <div class="row pt-3 no-gutters">
-        <input type="range" min="0" max="1000" value="1000"  id="myRange">
-        <button id="play" class="ml-2"><i class="fas fa-play"></i></button>
-        <input value="{{object.durata}}" id="elapsedTimeText">
-    </div>
-    {% endif %}
-
+    {% include 'classifiche/replay_control.html' %}
 </div>
 {% endblock %}
diff --git a/engine/templates/classifiche/unica.html b/engine/templates/classifiche/unica.html
index 4e917e8..a2ee9be 100644
--- a/engine/templates/classifiche/unica.html
+++ b/engine/templates/classifiche/unica.html
@@ -15,6 +15,7 @@
         <thead class="thead-light"><tr>
             <th scope="col" style="width:2.5%">Pos.</th>
             <th scope="col" style="width:8%">Squadra</th>
+            <th scope="col" style="display: none;">Num. squadra</th>
             <th scope="col" style="width:3%">Punt.</th>
             {% for s in soluzioni %}
             <th scope="col" style="white-space:pre" id="pr-{{s.problema}}">#{{s.problema|stringformat:"02d"}}</th>
@@ -26,6 +27,7 @@
             <tr id="riga-{{sq.num}}">
               <th scope="row" style="white-space:pre" id="pos-{{sq.num}}">1°</th>
               <th scope="row" class="text-truncate squadra" style="white-space:pre" id="nome-{{sq.num}}">{{sq.nome}}</th>
+              <th scope="row" style="display: none;" id="num-{{sq.num}}">{{sq.num}}</th>
               <th scope="row" style="white-space:pre" id="punt-{{sq.num}}"></th>
                 {% for s in soluzioni %}
                   <td id="cell-{{sq.num}}-{{s.problema}}"></td>
@@ -37,13 +39,6 @@
     </table>
     </div>
 
-    {% if object.finished %}
-    <div class="row pt-3 no-gutters">
-        <input type="range" min="0" max="1000" value="1000"  id="myRange">
-        <button id="play" class="ml-2"><i class="fas fa-play"></i></button>
-        <input value="{{object.durata}}" id="elapsedTimeText">
-    </div>
-    {% endif %}
-
+    {% include 'classifiche/replay_control.html' %}
 </div>
 {% endblock %}
diff --git a/engine/templates/gara/detail.html b/engine/templates/gara/detail.html
index 9ea5e69..859d370 100644
--- a/engine/templates/gara/detail.html
+++ b/engine/templates/gara/detail.html
@@ -32,6 +32,7 @@
 <li class="m-4">
 <a class="nohover" href="{% url 'engine:classifica-unica' object.pk %}" target="_blank">
     <b>Visualizzazione unica</b>
+    {% if not is_admin %}
     <div class="col-sm-6 col-lg-4 border" style="position: relative">
     <table class="table table-striped table-bordered table-sm mt-2 mb-2">
         <tbody>
@@ -54,12 +55,17 @@
         </tbody>
     </table>
     </div>
+    {% endif %}
 </a>
+{% if is_admin %}
+{% include 'gara/link_querystring.html' with engine_name='engine:classifica-unica' prefix='Visualizzazione unica' %}
+{% endif %}
 </li>
 
 <li class="m-4">
 <a class="nohover" href="{% url 'engine:classifica-squadre' object.pk %}" target="_blank">
     <b>Punteggi delle squadre</b>
+    {% if not is_admin %}
 	    <div class="col-sm-6 col-lg-4 border" style="position: relative">
         <table class="table table-borderless mt-2">
         <tr class="row no-gutters">
@@ -90,12 +96,17 @@
         </tr>
 	    </table>
 		</div>
+    {% endif %}
 </a>
+{% if is_admin %}
+{% include 'gara/link_querystring.html' with engine_name='engine:classifica-squadre' prefix='Punteggi delle squadre' %}
+{% endif %}
 </li>
 
 <li class="m-4">
 <a class="nohover" href="{% url 'engine:classifica-problemi' object.pk %}" target="_blank">
     <b>Punteggi dei problemi</b>
+    {% if not is_admin %}
 	<div class="col-sm-6 col-lg-4 border" style="position: relative">
 	<table class="table table-borderless mt-2">
 	<tr class="row no-gutters">
@@ -129,12 +140,17 @@
 	</tr>
 	</table>
 	</div>
+    {% endif %}
 </a>
+{% if is_admin %}
+{% include 'gara/link_querystring.html' with engine_name='engine:classifica-problemi' prefix='Punteggi dei problemi' %}
+{% endif %}
 </li>
 
 <li class="m-4">
 <a class="nohover" href="{% url 'engine:classifica-stato' object.pk %}" target="_blank">
     <b>Stato delle risposte</b>
+    {% if not is_admin %}
 	    <div class="col-sm-6 col-lg-4 border" style="position: relative">
 	    <table class="table table-striped table-bordered table-sm mt-2 mb-2" style="table-layout:fixed">
         <tbody>
@@ -156,7 +172,11 @@
         </tbody>
         </table>
 	</div>
+    {% endif %}
 </a>
+{% if is_admin %}
+{% include 'gara/link_querystring.html' with engine_name='engine:classifica-stato' prefix='Stato delle risposte' %}
+{% endif %}
 </li>
 </ul>
 
diff --git a/engine/templates/gara/link_querystring.html b/engine/templates/gara/link_querystring.html
new file mode 100644
index 0000000..5eb0a64
--- /dev/null
+++ b/engine/templates/gara/link_querystring.html
@@ -0,0 +1,27 @@
+<ul>
+<li>
+<a class="nohover" href="{% url engine_name object.pk %}?race_time=00:01:00" target="_blank">
+    {{prefix}} ad un tempo specifico (querystring <code>?race_time=00:01:00</code>)
+</a>
+</li>
+<li>
+<a class="nohover" href="{% url engine_name object.pk %}?computation_rate=00:00:05" target="_blank">
+    {{prefix}} specificando l'intervallo del ricalcolo punteggi (querystring <code>?computation_rate=00:00:05</code>)
+</a>
+</li>
+<li>
+<a class="nohover" href="{% url engine_name object.pk %}?ended=true" target="_blank">
+    {{prefix}} come se la gara fosse finita (querystring <code>?ended=true</code>)
+</a>
+</li>
+<li>
+<a class="nohover" href="{% url engine_name object.pk %}?ended=false" target="_blank">
+    {{prefix}} come se la gara <i>non</i> fosse finita (querystring <code>?ended=false</code>)
+</a>
+</li>
+<li>
+<a class="nohover" href="{% url engine_name object.pk %}?race_time=00:01:00&computation_rate=00:00:05&ended=false" target="_blank">
+    Le querystring precedenti si possono combinare a piacere (ad esempio, querystring <code>?race_time=00:01:00&computation_rate=00:00:05&ended=false</code>)
+</a>
+</li>
+</ul>
diff --git a/engine/templates/now.html b/engine/templates/now.html
new file mode 100644
index 0000000..e0171b5
--- /dev/null
+++ b/engine/templates/now.html
@@ -0,0 +1 @@
+{% now "c" %}
diff --git a/engine/urls.py b/engine/urls.py
index 866313f..649612d 100644
--- a/engine/urls.py
+++ b/engine/urls.py
@@ -26,7 +26,8 @@ urlpatterns = [
     path('classifica/<int:pk>/problemi', PuntiProblemiView.as_view(), name='classifica-problemi'),
     path('classifica/<int:pk>/stato', StatoProblemiView.as_view(), name='classifica-stato'),
     path('classifica/<int:pk>/unica', UnicaView.as_view(), name='classifica-unica'),
-    path('about', AboutView.as_view(), name="about")
+    path('about', AboutView.as_view(), name="about"),
+    path('now', NowView.as_view(), name="now")
 ]
 
 if settings.DEBUG:
diff --git a/engine/views.py b/engine/views.py
index b717e2d..37683fa 100644
--- a/engine/views.py
+++ b/engine/views.py
@@ -35,6 +35,10 @@ class AboutView(TemplateView):
     """ Pagina 'chi siamo' """
     template_name = "about.html"
 
+class NowView(TemplateView):
+    """ Tempo corrente"""
+    template_name = "now.html"
+
 
 class SignUpView(FormView):
     """ Pagina di registrazione """
@@ -480,40 +484,100 @@ class StatusView(DetailView):
         return JsonResponse(resp)
 
 
-class ClassificaView(DetailView):
-    """ Visualizzazione classifica """
+class ClassificaBaseView(UserPassesTestMixin, DetailView):
+    """ Visualizzazione classifica - classe base """
+
+    @staticmethod
+    def _elapsed_time_to_integer(elapsed):
+        """Convert HH:MM:SS to the number of elapsed seconds"""
+        return sum(int(x) * 60 ** i for i, x in enumerate(reversed(elapsed.split(":"))))
+
+    def _convert_time(self, variable_name, qs):
+        variable_value = self.request.GET.get(variable_name, None)
+        if variable_value is None:
+            qs[variable_name] = None
+        elif variable_value.isdecimal():
+            qs[variable_name] = int(variable_value)
+        elif ":" in variable_value:
+            qs[variable_name] = self._elapsed_time_to_integer(variable_value)
+        else:
+            qs[variable_name] = None
+
+    def _convert_boolean(self, variable_name, qs):
+        variable_value = self.request.GET.get(variable_name, None)
+        if variable_value is None:
+            qs[variable_name] = None
+        elif variable_value.lower() == "true" or variable_value == "1":
+            qs[variable_name] = True
+        elif variable_value.lower() == "false" or variable_value == "0":
+            qs[variable_name] = False
+        else:
+            qs[variable_name] = None
+
+    def _convert_querystring(self):
+        qs = {}
+        self._convert_time("race_time", qs)
+        self._convert_boolean("ended", qs)
+        self._convert_time("computation_rate", qs)
+        return qs
+
+    def test_func(self):
+        self.object = self.get_object()
+        self.querystring = self._convert_querystring()
+        is_admin = (
+            self.request.user.is_authenticated and self.request.user.can_administrate(self.object))
+        if any(self.querystring[k] is not None for k in ("race_time", "ended", "computation_rate")) and not is_admin:
+            return False
+        else:
+            return True
+
+    def get_context_data(self, **kwargs):
+        context = super().get_context_data(**kwargs)
+        context.update(self.querystring)
+        # Assign default values if querystring is not provided.
+        # This cannot be done in self._convert_querystring because otherwise it would
+        # not be possible to correctly check permissions.
+        if context["ended"] is None:
+            context["ended"] = self.object.finished
+        if context["computation_rate"] is None:
+            context["computation_rate"] = 3
+        return context
+
+
+class ClassificaView(ClassificaBaseView):
+    """ Visualizzazione classifica squadre """
     model = Gara
     template_name = "classifiche/squadre.html"
 
 
-class PuntiProblemiView(DetailView):
+class PuntiProblemiView(ClassificaBaseView):
     """ Visualizzazione punteggi problemi """
     model = Gara
     template_name = "classifiche/punti_problemi.html"
 
     def get_context_data(self, **kwargs):
-        context = super(PuntiProblemiView, self).get_context_data(**kwargs)
+        context = super().get_context_data(**kwargs)
         context['soluzioni'] = self.object.soluzioni.all().order_by("problema")
         return context
 
 
-class StatoProblemiView(DetailView):
+class StatoProblemiView(ClassificaBaseView):
     """ Visualizzazione stato problemi: quali sono stati risolti e quali no """
     model = Gara
     template_name = "classifiche/stato_problemi.html"
 
     def get_context_data(self, **kwargs):
-        context = super(StatoProblemiView, self).get_context_data(**kwargs)
+        context = super().get_context_data(**kwargs)
         context['soluzioni'] = self.object.soluzioni.all().order_by("problema")
         return context
 
 
-class UnicaView(DetailView):
+class UnicaView(ClassificaBaseView):
     """ Visualizzazione unica: tutte le informazioni """
     model = Gara
     template_name = "classifiche/unica.html"
 
     def get_context_data(self, **kwargs):
-        context = super(UnicaView, self).get_context_data(**kwargs)
+        context = super().get_context_data(**kwargs)
         context['soluzioni'] = self.object.soluzioni.all().order_by("problema")
         return context
