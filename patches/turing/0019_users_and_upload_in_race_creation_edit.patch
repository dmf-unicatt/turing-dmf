diff --git a/engine/forms.py b/engine/forms.py
index 7713ff6..1df8aa2 100644
--- a/engine/forms.py
+++ b/engine/forms.py
@@ -5,7 +5,7 @@ from django.contrib.auth.forms import UserCreationForm
 from django.utils import timezone
 from crispy_forms.helper import FormHelper
 
-from engine.models import Squadra, Soluzione, Jolly, Consegna, Bonus
+from engine.models import Squadra, Soluzione, Jolly, Consegna, Bonus, Gara
 from dateutil.parser import parse
 from mathrace_interaction.journal_reader import journal_reader
 from mathrace_interaction.filter.strip_mathrace_only_attributes_from_imported_turing import (
@@ -189,6 +189,86 @@ class ModificaBonusForm(SquadraChoiceUserSubsetForm):
     risposta = forms.IntegerField()
 
 
+class ModificaGaraForm(forms.ModelForm):
+    num_squadre = forms.IntegerField(initial=10, label="Squadre", help_text="Numero di squadre")
+
+    class Meta:
+        model = Gara
+        fields = ['nome', 'durata', 'durata_blocco', 'n_blocco', 'k_blocco',
+                 'num_problemi', 'cutoff', 'fixed_bonus', 'super_mega_bonus', 'jolly', 'testo',
+                 'admin', 'inseritori']
+
+    def __init__(self, *args, **kwargs):
+        num_squadre = kwargs.pop('num_squadre', None)
+        super(ModificaGaraForm, self).__init__(*args, **kwargs)
+        if num_squadre is not None:
+            self.fields["num_squadre"].initial = num_squadre
+        self.fields["admin"].required = False
+        self.fields["admin"].queryset = User.objects.filter(is_staff=True)
+        self.fields["inseritori"].queryset = User.objects.filter(is_staff=False)
+
+class CreaGaraForm(ModificaGaraForm):
+    nomi_squadre_upload = forms.FileField(
+        label="Nomi delle squadre", help_text="Scegli il file .txt contente i nomi delle squadre (opzionale)",
+        validators=[FileExtensionValidator(allowed_extensions=["txt"])], required=False)
+    nomi_problemi_upload = forms.FileField(
+        label="Nomi dei problemi", help_text="Scegli il file .txt contente i nomi dei problemi (opzionale)",
+        validators=[FileExtensionValidator(allowed_extensions=["txt"])], required=False)
+    risposte_problemi_upload = forms.FileField(
+        label="Risposte ai problemi", help_text="Scegli il file .txt contente le risposte ai problemi (opzionale)",
+        validators=[FileExtensionValidator(allowed_extensions=["txt"])], required=False)
+
+    def __init__(self, *args, **kwargs):
+        user = kwargs.pop('user', None)
+        super(CreaGaraForm, self).__init__(*args, **kwargs)
+        self.fields["admin"].initial = user.id
+
+    def clean(self):
+        cleaned_data = super().clean()
+        if self.errors:
+            return cleaned_data
+
+        nomi_squadre = self._read_text_upload(cleaned_data["nomi_squadre_upload"])
+        nomi_problemi = self._read_text_upload(cleaned_data["nomi_problemi_upload"])
+        risposte_problemi = self._read_text_upload(cleaned_data["risposte_problemi_upload"])
+
+        num_squadre = cleaned_data["num_squadre"]
+        has_nomi_squadre = (nomi_squadre is not None)
+        if has_nomi_squadre:
+            if len(nomi_squadre) != num_squadre:
+                raise forms.ValidationError("Il numero di righe nel file contenente i nomi delle squadre deve essere uguale al numero di squadre")
+        else:
+            nomi_squadre = [f"Squadra {i + 1}" for i in range(num_squadre)]
+
+        num_problemi = cleaned_data["num_problemi"]
+        has_nomi_problemi = (nomi_problemi is not None)
+        has_risposte_problemi = (risposte_problemi is not None)
+        if has_nomi_problemi != has_risposte_problemi:
+            raise forms.ValidationError("Devi caricare sia i nomi dei problemi sia le loro risposte")
+        if has_nomi_problemi:  # and also has_risposte_problemi
+            if len(risposte_problemi) != len(risposte_problemi):
+                raise forms.ValidationError("Il numero di righe nel file contenente le risposte ai problemi deve essere uguale al numero di righe nel file contenente le risposte ai problemi")
+            if len(nomi_problemi) != num_problemi:
+                raise forms.ValidationError("Il numero di righe nel file contenente i nomi dei problemi deve essere uguale al numero dei problemi")
+            if len(risposte_problemi) != num_problemi:
+                raise forms.ValidationError("Il numero di righe nel file contenente le risposte ai problemi deve essere uguale al numero dei problemi")
+        else:
+            nomi_problemi = [f"Problema {i + 1}" for i in range(num_problemi)]
+            risposte_problemi = [0 for _ in range(num_problemi)]
+
+        cleaned_data["nomi_squadre"] = nomi_squadre
+        cleaned_data["nomi_problemi"] = nomi_problemi
+        cleaned_data["risposte_problemi"] = risposte_problemi
+        return cleaned_data
+
+    @staticmethod
+    def _read_text_upload(text_file):
+        if text_file is None:
+            return None
+        else:
+            all_lines = [line.strip() for line in text_file.read().decode("utf-8").splitlines()]
+            return [line for line in all_lines if line != ""]
+
 class UploadGaraForm(forms.Form):
     gara = forms.FileField(
         label="Gara", help_text="Scegli il file .journal o .json contente la gara da importare",
diff --git a/engine/templates/gara/create.html b/engine/templates/gara/create.html
index 791c888..55c5792 100644
--- a/engine/templates/gara/create.html
+++ b/engine/templates/gara/create.html
@@ -1,6 +1,8 @@
 {% extends "baseheader.html" %}
 {% block title %}Crea nuova gara{% endblock %}
 
+{% load crispy_forms_tags %}
+
 {% block content %}
 
 <div class="container">
@@ -12,6 +14,20 @@
 
     {% include 'gara/parametri.html' %}
 
+    <div class="form-row">
+        <div class="form-group col-md-12">
+        {{ form.nomi_squadre_upload|as_crispy_field }}
+        </div>
+
+        <div class="form-group col-md-12">
+        {{ form.nomi_problemi_upload|as_crispy_field }}
+        </div>
+
+        <div class="form-group col-md-12">
+        {{ form.risposte_problemi_upload|as_crispy_field }}
+        </div>
+    </div>
+
     <button id="submit" type="submit" class="btn btn-primary">Crea gara</button>
 </form>
 </div>
diff --git a/engine/templates/gara/parametri.html b/engine/templates/gara/parametri.html
index ab4f395..17b8f79 100644
--- a/engine/templates/gara/parametri.html
+++ b/engine/templates/gara/parametri.html
@@ -1,12 +1,15 @@
 {% load crispy_forms_tags %}
 
     <div class="form-row">
-        <div class="col-md-6 form-group">
+        <div class="col-md-4 form-group">
             {{ form.nome|as_crispy_field }}
         </div>
-        <div class="col-md-6 form-group">
+        <div class="col-md-4 form-group">
             {{ form.num_problemi|as_crispy_field }}
         </div>
+        <div class="col-md-4 form-group">
+            {{ form.num_squadre|as_crispy_field }}
+        </div>
     </div>
     <div class="form-row">
         <div class="col-md-6 form-group">
@@ -37,3 +40,5 @@
     </div>
     {{ form.jolly|as_crispy_field }}
     {{ form.testo|as_crispy_field }}
+    {{ form.admin|as_crispy_field }}
+    {{ form.inseritori|as_crispy_field }}
diff --git a/engine/tests.py b/engine/tests.py
index 8dab23d..2b7a3af 100644
--- a/engine/tests.py
+++ b/engine/tests.py
@@ -1153,7 +1153,7 @@ class ValidationTests(MyTestCase, TuringTests):
     def test_crea_gara_bonus_negativi(self):
         self.url = reverse('engine:gara-new')
         self.data = {
-            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
+            "nome": "Prova", "num_problemi": "20", "num_squadre": "10", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
             "fixed_bonus_0": "20", "fixed_bonus_1": "15", "fixed_bonus_2": "10", "fixed_bonus_3": "8", "fixed_bonus_4": "6",
             "fixed_bonus_5": "5", "fixed_bonus_6": "4", "fixed_bonus_7": "3", "fixed_bonus_8": "2", "fixed_bonus_9": "-1",
             "super_mega_bonus_0": "100", "super_mega_bonus_1": "60", "super_mega_bonus_2": "40", "super_mega_bonus_3": "30",
@@ -1357,7 +1357,7 @@ class PermissionTests(MyTestCase, TuringTests):
     def test_crea_gara_permission(self):
         self.url = reverse('engine:gara-new')
         self.data = {
-            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
+            "nome": "Prova", "num_problemi": "20", "num_squadre": "10", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
             "fixed_bonus_0": "20", "fixed_bonus_1": "+15", "fixed_bonus_2": "+10", "fixed_bonus_3": "+8", "fixed_bonus_4": "+6",
             "fixed_bonus_5": "+5", "fixed_bonus_6": "+4", "fixed_bonus_7": "+3", "fixed_bonus_8": "+2", "fixed_bonus_9": "+1",
             "super_mega_bonus_0": "100", "super_mega_bonus_1": "+60", "super_mega_bonus_2": "+40", "super_mega_bonus_3": "+30",
diff --git a/engine/views.py b/engine/views.py
index c20b5e7..3df99a4 100644
--- a/engine/views.py
+++ b/engine/views.py
@@ -14,7 +14,7 @@ from django.db.models import F
 
 from engine.models import User, Gara, Soluzione, Squadra, Evento, Consegna, Jolly, Bonus
 from engine.forms import SignUpForm, RispostaFormset, SquadraFormset, InserimentoForm,\
-    ModificaConsegnaForm, ModificaJollyForm, ModificaBonusForm, UploadGaraForm, QueryForm
+    ModificaConsegnaForm, ModificaJollyForm, ModificaBonusForm, UploadGaraForm, QueryForm, CreaGaraForm, ModificaGaraForm
 from engine.formfields import IntegerMultiField
 
 import logging
@@ -66,10 +66,8 @@ class SignUpClosedView(TemplateView):
 #####################
 
 class CreaOModificaGaraView(SuccessMessageMixin):
-    """ Superclasse per astrarre metodi comuni a CreaGaraView e ModificaGaraView"""
+    """ Superclasse per astrarre metodi comuni a CreaGaraView e GaraParametriView"""
     model = Gara
-    fields = ['nome', 'durata', 'durata_blocco', 'n_blocco', 'k_blocco',
-              'num_problemi', 'cutoff', 'fixed_bonus', 'super_mega_bonus', 'jolly', 'testo']
 
     def get_form(self):
         form = super().get_form()
@@ -90,19 +88,29 @@ class CreaOModificaGaraView(SuccessMessageMixin):
         return reverse("engine:gara-admin", kwargs={'pk': self.object.pk})
 
 
-class CreaGaraView(PermissionRequiredMixin, CreaOModificaGaraView, CreateView):
+class CreaGaraView(PermissionRequiredMixin, CreaOModificaGaraView, FormView, CreateView):
     """ View per la creazione di una gara """
-
+    form_class = CreaGaraForm
     template_name = "gara/create.html"
     success_message = 'Gara creata con successo!'
     permission_required = "engine.add_gara"
 
+    def get_form_kwargs(self):
+        kwargs = super(CreaGaraView, self).get_form_kwargs()
+        kwargs['user'] = self.request.user
+        return kwargs
+
     def form_valid(self, form):
         form.instance.admin = self.request.user
         response = super().form_valid(form)
         gara = form.instance
-        for i in range(1, gara.num_problemi+1):
-            Soluzione.objects.create(gara=gara, problema=i, nome="Problema {}".format(i))
+        nomi_squadre = form.cleaned_data.get("nomi_squadre")
+        nomi_problemi = form.cleaned_data.get("nomi_problemi")
+        risposte_problemi = form.cleaned_data.get("risposte_problemi")
+        for (i, nome) in enumerate(nomi_squadre):
+            Squadra.objects.create(gara=gara, num=i + 1, nome=nome)
+        for i in range(gara.num_problemi):
+            Soluzione.objects.create(gara=gara, problema=i + 1, nome=nomi_problemi[i], risposta=risposte_problemi[i])
         return response
 
     def form_invalid(self, form):
@@ -110,11 +118,17 @@ class CreaGaraView(PermissionRequiredMixin, CreaOModificaGaraView, CreateView):
         return super().form_invalid(form)
 
 
-class GaraParametriView(CheckPermissionsMixin, CreaOModificaGaraView, UpdateView):
+class GaraParametriView(CheckPermissionsMixin, CreaOModificaGaraView, FormView, UpdateView):
     """ View per cambiare i parametri di una gara """
+    form_class = ModificaGaraForm
     template_name = "gara/modify.html"
     success_message = 'Parametri di gara salvati con successo!'
 
+    def get_form_kwargs(self):
+        kwargs = super().get_form_kwargs()
+        kwargs['num_squadre'] = len(self.get_object().squadre.all())
+        return kwargs
+
     def test_func(self):
         # Salva la gara dentro self.object, così siamo sicuri
         # che sia stata validata e non viene chiamato get_object() due volte.
@@ -126,13 +140,27 @@ class GaraParametriView(CheckPermissionsMixin, CreaOModificaGaraView, UpdateView
         gara_nuova = form.instance
         gara_vecchia = self.get_object()
 
-        if gara_nuova.num_problemi > gara_vecchia.num_problemi:
+        num_squadre_nuova = form.cleaned_data.get("num_squadre")
+        num_squadre_vecchia = len(gara_vecchia.squadre.all())
+        num_problemi_nuova = gara_nuova.num_problemi
+        num_problemi_vecchia = gara_vecchia.num_problemi
+
+        if num_squadre_nuova > num_squadre_vecchia:
+            # dobbiamo creare nuove squadre
+            for i in range(num_squadre_vecchia+1, num_squadre_nuova+1):
+                Squadra.objects.create(gara=gara_vecchia, num=i, nome="Squadra {}".format(i))
+        elif num_squadre_nuova < num_squadre_vecchia:
+            # dobbiamo cancellare squadre
+            Squadra.objects.filter(gara=gara_vecchia, num__range=(num_squadre_nuova+1, num_squadre_vecchia)).delete()
+
+        if num_problemi_nuova > num_problemi_vecchia:
             # dobbiamo creare nuovi problemi
-            for i in range(gara_vecchia.num_problemi+1, gara_nuova.num_problemi+1):
+            for i in range(num_problemi_vecchia+1, num_problemi_nuova+1):
                 Soluzione.objects.create(gara=gara_vecchia, problema=i, nome="Problema {}".format(i))
-        elif gara_nuova.num_problemi < gara_vecchia.num_problemi:
+        elif num_problemi_nuova < num_problemi_vecchia:
             # dobbiamo cancellare problemi
-            Soluzione.objects.filter(gara=gara_vecchia, problema__range=(gara_nuova.num_problemi+1, gara_vecchia.num_problemi)).delete()
+            Soluzione.objects.filter(gara=gara_vecchia, problema__range=(num_problemi_nuova+1, num_problemi_vecchia)).delete()
+
         response = super().form_valid(form) # committa le modifiche
         return response
 
