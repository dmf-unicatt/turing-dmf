diff --git a/engine/models.py b/engine/models.py
index 391935c..a843c59 100644
--- a/engine/models.py
+++ b/engine/models.py
@@ -76,6 +76,7 @@ class Gara(models.Model):
     k_blocco = models.PositiveSmallIntegerField(blank=True, null=True,  # Il valore NULL fa aumentare sempre il punteggio
                                                 verbose_name="Parametro K",
                                                 help_text="Numero di risposte errate che aumentano il punteggio di un problema")
+    durata_blocco = models.DurationField(default=timedelta(minutes=20), help_text="Il punteggio dei problemi viene bloccato quando il tempo rimanente Ã¨ quello indicato in questo campo nel formato hh:mm:ss")
     num_problemi = models.PositiveSmallIntegerField(default=20,
                                                     verbose_name="Problemi",
                                                     help_text="Numero di problemi")
@@ -141,6 +142,11 @@ class Gara(models.Model):
             return None
         return self.inizio + self.durata
 
+    def get_ora_blocco(self):
+        if not self.inizio:
+            return None
+        return self.inizio + self.durata - self.durata_blocco
+
     def finished(self):
         return (self.inizio is not None) and (timezone.now() > self.get_ora_fine())
 
@@ -299,6 +305,7 @@ class Gara(models.Model):
 
         this.inizio = parse(data['inizio'])
         this.durata = timedelta(minutes=data['durata'])
+        this.durata_blocco = timedelta(minutes=data.get('durata_blocco', 20))
         this.num_problemi = len(data['soluzioni'])
         this.save()
 
@@ -325,7 +332,7 @@ class Gara(models.Model):
 
     def to_dict(self):
         d = {}
-        for k in {'nome', 'inizio', 'durata', 'n_blocco', 'k_blocco', 'num_problemi', 'cutoff', 'num_problemi', 'fixed_bonus', 'super_mega_bonus'}:
+        for k in {'nome', 'inizio', 'durata', 'durata_blocco', 'n_blocco', 'k_blocco', 'num_problemi', 'cutoff', 'num_problemi', 'fixed_bonus', 'super_mega_bonus'}:
             d[k] = getattr(self, k)
 
         d.update({
diff --git a/engine/static/engine/js/client.js b/engine/static/engine/js/client.js
index ee986ff..ef69550 100644
--- a/engine/static/engine/js/client.js
+++ b/engine/static/engine/js/client.js
@@ -26,6 +26,15 @@ class Gara {
         this.cutoff = data.cutoff;
         this.jolly_enabled = data.jolly_enabled;
 
+        this.penalita_errore = 10;
+        this.coefficiente_derivata = 1;
+        this.coefficiente_bonus_errori = 2;
+        this.coefficiente_jolly = 2;
+        this.calcola_punteggio_tempo_iniziale = function(n_prob, penalita_errore) {
+            return n_prob * penalita_errore;
+        }
+        this._scadenza_jolly = 12 * 60 * 1000; // misurato in millisecondi
+
         this.problemi = {};
         for (var i in data.problemi)
             this.problemi[i] = new Problema(this, i, data.problemi[i]["nome"], data.problemi[i]["punteggio"]);
@@ -40,6 +49,7 @@ class Gara {
         this.last_event = 0;
         this._time = this.inizio; // Parte a calcolare dall'inizio della gara
         this.fine = new Date(data.fine);
+        this.tempo_blocco = new Date(data.tempo_blocco);
         this.en_plein = 0;
 
         for (var i in data.jolly) {
@@ -132,13 +142,13 @@ class Gara {
     get soglia_blocco() {
         // Il momento in cui i problemi smettono di salire
         if (this.inizio == null) return new Date();
-        return new Date(this.fine.getTime() - 1000*60*20);
+        return this.tempo_blocco;
     }
 
     get scadenza_jolly() {
         // Il momento dopo il quale mostrare i jolly
         if (this.inizio == null) return new Date();
-        return new Date(this.inizio.getTime() + 1000*60*10);
+        return new Date(this.inizio.getTime() + this._scadenza_jolly);
     }
 
     get en_plein_bonus() {
@@ -251,8 +261,8 @@ class Problema {
         else
             var t = this.gara.time;
 
-        var derivata = Math.floor((t - this.gara.inizio) / 60000);
-        var bonus_errori = this._risposte_sbagliate * 2;
+        var derivata = Math.floor((t - this.gara.inizio) / 60000) * this.gara.coefficiente_derivata;
+        var bonus_errori = this._risposte_sbagliate * this.gara.coefficiente_bonus_errori;
         return this.punteggio + derivata + bonus_errori;
     }
 
@@ -335,10 +345,10 @@ class Risposta {
             pts += this.problema.punti_base + this._bonus;
         }
 
-        pts -= this.errori * 10;
+        pts -= this.errori * this.gara.penalita_errore;
 
         if (this.is_jolly)
-            pts = pts * 2;
+            pts = pts * this.gara.coefficiente_jolly;
 
         return pts
     }
@@ -387,7 +397,7 @@ class Squadra {
 
     get punteggio() {
         // Calcola il punteggio della squadra
-        var pts = this.gara.n_prob * 10;
+        var pts = this.gara.calcola_punteggio_tempo_iniziale(this.gara.n_prob, this.gara.penalita_errore);
         pts += this._en_plein_bonus;
         for(var i in this.risposte) {
             pts += this.risposte[i].punteggio
diff --git a/engine/templates/gara/parametri.html b/engine/templates/gara/parametri.html
index 049e2d0..ab4f395 100644
--- a/engine/templates/gara/parametri.html
+++ b/engine/templates/gara/parametri.html
@@ -1,15 +1,20 @@
 {% load crispy_forms_tags %}
 
     <div class="form-row">
-        <div class="form-group col-md-6">
+        <div class="col-md-6 form-group">
             {{ form.nome|as_crispy_field }}
         </div>
-        <div class="col-md-3 form-group">
+        <div class="col-md-6 form-group">
             {{ form.num_problemi|as_crispy_field }}
         </div>
-        <div class="col-md-3 form-group">
+    </div>
+    <div class="form-row">
+        <div class="col-md-6 form-group">
             {{ form.durata|as_crispy_field }}
         </div>
+        <div class="col-md-6 form-group">
+            {{ form.durata_blocco|as_crispy_field }}
+        </div>
     </div>
     <div class="form-row">
         <div class="col-md-4 form-group">
diff --git a/engine/tests.py b/engine/tests.py
index d371911..52f2b4c 100644
--- a/engine/tests.py
+++ b/engine/tests.py
@@ -476,14 +476,14 @@ class LiveTests(StaticLiveServerTestCase, TuringTests):
 
         self.consegna(squadra=1, problema=1, risposta=0)
 
-        self.go_to_minute(10)
+        self.go_to_minute(12)
 
         self.consegna(squadra=2, problema=2, risposta=1)
         self.consegna(squadra=3, problema=3, risposta=0)
 
-        self.check_punti_squadra(squadra=1, expected=30+2*(20+30))
+        self.check_punti_squadra(squadra=1, expected=30+2*(20+32))
         self.check_punti_squadra(squadra=2, expected=30+2*(-10))
-        self.check_punti_squadra(squadra=3, expected=30+2*(20+30))
+        self.check_punti_squadra(squadra=3, expected=30+2*(20+32))
 
     def test_jolly_absence(self):
         self.crea_gara(num_squadre=5, num_ospiti=0, soluzioni=[0, 0, 0], jolly=False)
@@ -493,14 +493,14 @@ class LiveTests(StaticLiveServerTestCase, TuringTests):
 
         self.consegna(squadra=1, problema=1, risposta=0)
 
-        self.go_to_minute(10)
+        self.go_to_minute(12)
 
         self.consegna(squadra=2, problema=2, risposta=1)
         self.consegna(squadra=3, problema=3, risposta=0)
 
-        self.check_punti_squadra(squadra=1, expected=30+1*(20+30))
+        self.check_punti_squadra(squadra=1, expected=30+1*(20+32))
         self.check_punti_squadra(squadra=2, expected=30+1*(-10))
-        self.check_punti_squadra(squadra=3, expected=30+1*(20+30))
+        self.check_punti_squadra(squadra=3, expected=30+1*(20+32))
 
     def test_gara_full_statica(self):
         """ Test if full static gara works: fixed points to problems, no increments, no bonuses, no jolly"""
@@ -939,7 +939,7 @@ class HtmlTests(StaticLiveServerTestCase, TuringTests):
         self.assertEqual(len(c), 0)
 
     def test_modifica_parametri(self):
-        self.crea_gara(num_squadre=3, soluzioni=[1,], num_ospiti=0, n_blocco=2, k_blocco=5, iniziata=True, admin=self.user, durata=timedelta(hours=2))
+        self.crea_gara(num_squadre=3, soluzioni=[1,], num_ospiti=0, n_blocco=2, k_blocco=5, iniziata=True, admin=self.user, durata=timedelta(hours=2), durata_blocco=timedelta(minutes=20))
         gara = Gara.objects.first()
 
         url = self.get_url("engine:gara-parametri", pk=gara.pk)
@@ -949,6 +949,8 @@ class HtmlTests(StaticLiveServerTestCase, TuringTests):
         self.selenium.find_element(By.NAME, "nome").send_keys("prova")
         self.selenium.find_element(By.NAME, "durata").clear()
         self.selenium.find_element(By.NAME, "durata").send_keys("02:30:00")
+        self.selenium.find_element(By.NAME, "durata_blocco").clear()
+        self.selenium.find_element(By.NAME, "durata_blocco").send_keys("00:30:00")
         self.selenium.find_element(By.NAME, "k_blocco").clear()
         self.selenium.find_element(By.NAME, "k_blocco").send_keys("6")
         self.selenium.find_element(By.NAME, "num_problemi").clear()
@@ -958,13 +960,14 @@ class HtmlTests(StaticLiveServerTestCase, TuringTests):
 
         gara = Gara.objects.first()
         self.assertEqual(gara.durata, timedelta(hours=2,minutes=30))
+        self.assertEqual(gara.durata_blocco, timedelta(minutes=30))
         self.assertEqual(gara.k_blocco, 6)
         self.assertEqual(gara.num_problemi, 7)
         self.assertEqual(len(Soluzione.objects.filter(gara=gara)), 7)
         self.assertEqual(gara.nome, "prova")
 
     def test_riduci_problemi(self):
-        self.crea_gara(num_squadre=3, soluzioni=[1,2,3,4,5], num_ospiti=0, n_blocco=2, k_blocco=5, iniziata=True, admin=self.user, durata=timedelta(hours=2))
+        self.crea_gara(num_squadre=3, soluzioni=[1,2,3,4,5], num_ospiti=0, n_blocco=2, k_blocco=5, iniziata=True, admin=self.user, durata=timedelta(hours=2), durata_blocco=timedelta(minutes=20))
         gara = Gara.objects.first()
 
         url = self.get_url("engine:gara-parametri", pk=gara.pk)
@@ -1012,7 +1015,7 @@ class ValidationTests(MyTestCase, TuringTests):
     def test_crea_gara_bonus_negativi(self):
         self.url = reverse('engine:gara-new')
         self.data = {
-            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
+            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
             "fixed_bonus_0": "20", "fixed_bonus_1": "15", "fixed_bonus_2": "10", "fixed_bonus_3": "8", "fixed_bonus_4": "6",
             "fixed_bonus_5": "5", "fixed_bonus_6": "4", "fixed_bonus_7": "3", "fixed_bonus_8": "2", "fixed_bonus_9": "-1",
             "super_mega_bonus_0": "100", "super_mega_bonus_1": "60", "super_mega_bonus_2": "40", "super_mega_bonus_3": "30",
@@ -1163,7 +1166,7 @@ class PermissionTests(MyTestCase, TuringTests):
     def test_crea_gara_permission(self):
         self.url = reverse('engine:gara-new')
         self.data = {
-            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
+            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
             "fixed_bonus_0": "20", "fixed_bonus_1": "+15", "fixed_bonus_2": "+10", "fixed_bonus_3": "+8", "fixed_bonus_4": "+6",
             "fixed_bonus_5": "+5", "fixed_bonus_6": "+4", "fixed_bonus_7": "+3", "fixed_bonus_8": "+2", "fixed_bonus_9": "+1",
             "super_mega_bonus_0": "100", "super_mega_bonus_1": "+60", "super_mega_bonus_2": "+40", "super_mega_bonus_3": "+30",
@@ -1189,7 +1192,7 @@ class PermissionTests(MyTestCase, TuringTests):
         gara = Gara.objects.first()
         self.url = reverse('engine:gara-parametri', kwargs={'pk':gara.pk})
         self.data = {
-            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
+            "nome": "Prova", "num_problemi": "20", "durata": "02:00:00", "durata_blocco": "00:20:00", "n_blocco": "2", "cutoff": "", "k_blocco": "5",
             "fixed_bonus_0": "20", "fixed_bonus_1": "+15", "fixed_bonus_2": "+10", "fixed_bonus_3": "+8", "fixed_bonus_4": "+6",
             "fixed_bonus_5": "+5", "fixed_bonus_6": "+4", "fixed_bonus_7": "+3", "fixed_bonus_8": "+2", "fixed_bonus_9": "+1",
             "super_mega_bonus_0": "100", "super_mega_bonus_1": "+60", "super_mega_bonus_2": "+40", "super_mega_bonus_3": "+30",
diff --git a/engine/views.py b/engine/views.py
index 6b41998..2f68324 100644
--- a/engine/views.py
+++ b/engine/views.py
@@ -64,7 +64,7 @@ class SignUpClosedView(TemplateView):
 class CreaOModificaGaraView(SuccessMessageMixin):
     """ Superclasse per astrarre metodi comuni a CreaGaraView e ModificaGaraView"""
     model = Gara
-    fields = ['nome', 'durata', 'n_blocco', 'k_blocco',
+    fields = ['nome', 'durata', 'durata_blocco', 'n_blocco', 'k_blocco',
               'num_problemi', 'cutoff', 'fixed_bonus', 'super_mega_bonus', 'jolly', 'testo']
 
     def get_form(self):
@@ -428,6 +428,7 @@ class StatusView(DetailView):
             return JsonResponse(resp)
 
         resp['fine'] = gara.get_ora_fine()
+        resp['tempo_blocco'] = gara.get_ora_blocco()
 
         resp['consegne'] = gara.get_consegne()
         resp['jolly'] = gara.get_jolly()
