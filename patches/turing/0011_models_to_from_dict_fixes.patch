diff --git a/engine/models.py b/engine/models.py
index 16c16d6..d62eeb2 100644
--- a/engine/models.py
+++ b/engine/models.py
@@ -299,29 +299,40 @@ class Gara(models.Model):
             Soluzione(gara=this, **soluzione).save()
 
         for evento in data['eventi']:
-            evento['orario'] = parse(evento['orario'])
+            evento_copy = dict(evento)
+            evento_copy['orario'] = parse(evento['orario'])
             if 'squadra_id' in evento:
-                evento['squadra'] = Squadra.objects.get(gara=this, num=evento['squadra_id'])
-                del evento['squadra_id']
+                evento_copy['squadra'] = Squadra.objects.get(gara=this, num=evento['squadra_id'])
+                del evento_copy['squadra_id']
 
             [subclass] = [x for x in Evento.__subclasses__() if x.__name__ == evento['subclass']]
-            obj = subclass(gara=this, **evento)
+            obj = subclass(gara=this, **evento_copy)
             obj.save()
-            obj.orario = evento['orario']
+            obj.orario = evento_copy['orario']
             obj.save()
-            assert obj.orario == evento['orario'], "Orario dell'evento non caricato correttamente"
+            assert obj.orario == evento_copy['orario'], "Orario dell'evento non caricato correttamente"
 
         return this
 
     def to_dict(self):
         d = {}
-        for k in {'nome', 'inizio', 'durata', 'durata_blocco', 'n_blocco', 'k_blocco', 'num_problemi', 'cutoff', 'num_problemi', 'fixed_bonus', 'super_mega_bonus'}:
+        for k in {'nome', 'n_blocco', 'k_blocco', 'num_problemi', 'cutoff', 'num_problemi'}:
             d[k] = getattr(self, k)
+        for k in {'fixed_bonus', 'super_mega_bonus'}:
+            # Elimina valori nulli al termine della lista
+            d[k] = ','.join([x for x in getattr(self, k).split(',') if int(x) > 0])
+        for k in {'inizio'}:
+            d[k] = getattr(self, k).isoformat()
+        for k in {'durata', 'durata_blocco'}:
+            d[k] = int(getattr(self, k).seconds / 60)
 
         d.update({
-            'eventi': list(self.eventi.all()),
-            'soluzioni': list(self.soluzioni.all()),
-            'squadre': list(self.squadre.all()),
+            # Non si può usare order_by perché la classe padre Evento contiene solo orario e subclass
+            # 'eventi': [e.to_dict() for e in self.eventi.all().order_by('orario', 'subclass', 'squadra_id', 'problema')],
+            'eventi': list(sorted([e.to_dict() for e in self.eventi.all()], key=lambda e: (
+                e["orario"], e["subclass"], e["squadra_id"], e["problema"]))),
+            'soluzioni': [s.to_dict() for s in self.soluzioni.all().order_by('problema')],
+            'squadre': [s.to_dict() for s in self.squadre.all().order_by('num')],
         })
         return d
 
@@ -437,8 +448,10 @@ class Evento(KnowsChild):
         d = {}
         c = self.as_child()
         for k, v in c.__dict__.items():
-            if k in {'subclass', 'orario', 'problema', 'risposta'}:
+            if k in {'subclass', 'problema', 'risposta'}:
                 d[k] = v
+            if k == 'orario':
+                d[k] = v.isoformat()
             if k == 'squadra_id':
                 d['squadra_id'] = c.squadra.num
 
